{
  // 틀림. 공식이 나오길래 공식으로 풀려고 했으나 아무래도 입력이 100이 들어오면 중간에 모듈러 연산을 해줄 수가 없다.
  const n = Number(`4`.trim());

  function Sn(num) {
    if (num === 1) {
      return 9;
    }
    if (num > 1) {
      return (
        2 +
        (2 ** (num - 2) % 1000000000) +
        (((((2 ** (num - 1) % 1000000000) * 7) % 1000000000) % 1000000000) %
          1000000000)
      );
    }
  }

  console.log(`${Sn(n) % 1000000000}`);
}
//dp로 풀고 중간 과정에서 계속 나눠주면 될 것 같으나
//  규칙을 제대로 파악한 것이 맞는지 의심이 든다.

// 맞은 풀이
{
  const n = Number(`1`.trim());

  const dp = Array(n);
  dp[0] = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  // dp채우기
  for (i = 1; i < n; i++) {
    dp[i] = Array(10);
    dp[i][0] = dp[i - 1][1];
    dp[i][9] = dp[i - 1][8];
    for (j = 1; j < 9; j++) {
      dp[i][j] =
        (dp[i - 1][j - 1] % 1000000000) + (dp[i - 1][j + 1] % 1000000000);
    }
  }
  console.log(dp[n - 1].reduce((p, c) => p + c) % 1000000000);
}
// 공식이 틀린게 맞았다. 잘못 생각했었다. 결국 공식이 아닌 DP로 풀었어야 하는 문제였다.
