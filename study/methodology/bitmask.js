// 비트마스킹이란 알고리즘은 아니고, 비트를 활용한 일종의 테크닉이라고 할 수 있다. 
// 전반적 내용을 잘 정리해준 블로그 : https://mygumi.tistory.com/361

/* 
{ 0, 1, 2, 3, 4 } => 11111 => (2^4 * 1) + (2^3 * 1) + (2^2 * 1) + (2^1 * 1) + (2^0 * 1) = 31
{ 1, 2, 3, 4 } => 11110 => (2^4 * 1) + (2^3 * 1) + (2^2 * 1) + (2^1 * 1) = 30 
{ 1, 2, 4 } => 10110 => (2^4 * 1) + (2^2 * 1) + (2^1 * 1) = 22
{ 2, 4 } => 10100 => (2^4 * 1) + (2^2 * 1) = 20
{ 1 } => 00010 => (2^1 * 1) = 2

부분집합을 배열이 아닌 정수를 통해 나타낼 수 있다. 
20이란 정수는 부분집합 {2, 4}를 나타내게 되는것이다. 
*/
// * 비트 연산을 통해 삽입, 삭제, 조회하기

// - i번째 값을 1로 변경하기: OR 연산 활용
// (1010 | 1 << 2)
// 1010 | 0100 => 1110

// - i번째 값을 0으로 변경하기: AND 연산과 NOT 연산 활용
// 1010 & ~1 << 2
// 1010 & 1011 => 1010

// - i번째 값을 알아내기
// A & (1 << i)
// 2번째 비트 : 1010 & (1 << 2) = 1010 & 0100 => 0
// 3번째 비트 : 1010 & (1 << 3) = 1010 & 1000 => 1000
// i번째 비트의 값이 0이라면 값이 0임을 알 수 있다.
